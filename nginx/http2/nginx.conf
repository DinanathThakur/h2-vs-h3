user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'protocol=$server_protocol';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # HTTP/2 Server Configuration
    server {
        listen 443 ssl http2;
        server_name localhost 127.0.0.1;

        # SSL Configuration
        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        
        # SSL Security Settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # CORS headers for cross-protocol testing (moved to location blocks for proper inheritance)
        
        # Allow iframe embedding from both servers
        add_header X-Frame-Options "SAMEORIGIN" always;

        # Protocol identification header
        add_header X-Protocol "HTTP/2" always;
        add_header Alt-Svc 'h2=":443"' always;

        # Root directory for static files
        root /usr/share/nginx/html;
        index index.html index.htm;

        # Handle CORS preflight requests and add CORS headers to all responses
        location / {
            # Add CORS headers to all responses
            add_header Access-Control-Allow-Origin "https://localhost:8444" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
            add_header Access-Control-Allow-Credentials "true" always;
            
            # Handle OPTIONS requests for CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "https://localhost:8444" always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD" always;
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Max-Age 86400 always;
                add_header Content-Type "text/plain charset=UTF-8" always;
                add_header Content-Length 0 always;
                return 204;
            }
            
            try_files $uri $uri/ =404;
            
            # Cache static assets
            location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header X-Protocol "HTTP/2" always;
                add_header Access-Control-Allow-Origin "https://localhost:8444" always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD" always;
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
                add_header Access-Control-Allow-Credentials "true" always;
            }
            
            # HTML files with shorter cache
            location ~* \.(html|htm)$ {
                expires 1h;
                add_header Cache-Control "public";
                add_header X-Protocol "HTTP/2" always;
                add_header Access-Control-Allow-Origin "https://localhost:8444" always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD" always;
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
                add_header Access-Control-Allow-Credentials "true" always;
            }
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "HTTP/2 Server OK\n";
            add_header Content-Type text/plain;
            add_header X-Protocol "HTTP/2" always;
        }

        # Server status endpoint for monitoring
        location /status {
            access_log off;
            return 200 '{"status":"ok","protocol":"HTTP/2","server":"nginx","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
            add_header X-Protocol "HTTP/2" always;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            internal;
            add_header X-Protocol "HTTP/2" always;
        }
        
        location = /50x.html {
            internal;
            add_header X-Protocol "HTTP/2" always;
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name localhost 127.0.0.1;
        return 301 https://$server_name$request_uri;
    }
}